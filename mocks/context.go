// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cocov-ci/go-plugin-kit/cocov (interfaces: Context)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cocov "github.com/cocov-ci/go-plugin-kit/cocov"
	gomock "github.com/golang/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// CommitSHA mocks base method.
func (m *MockContext) CommitSHA() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitSHA")
	ret0, _ := ret[0].(string)
	return ret0
}

// CommitSHA indicates an expected call of CommitSHA.
func (mr *MockContextMockRecorder) CommitSHA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitSHA", reflect.TypeOf((*MockContext)(nil).CommitSHA))
}

// EmitIssue mocks base method.
func (m *MockContext) EmitIssue(arg0 cocov.IssueKind, arg1 string, arg2, arg3 uint, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmitIssue", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmitIssue indicates an expected call of EmitIssue.
func (mr *MockContextMockRecorder) EmitIssue(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitIssue", reflect.TypeOf((*MockContext)(nil).EmitIssue), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RepoName mocks base method.
func (m *MockContext) RepoName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RepoName indicates an expected call of RepoName.
func (mr *MockContextMockRecorder) RepoName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoName", reflect.TypeOf((*MockContext)(nil).RepoName))
}

// Workdir mocks base method.
func (m *MockContext) Workdir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Workdir")
	ret0, _ := ret[0].(string)
	return ret0
}

// Workdir indicates an expected call of Workdir.
func (mr *MockContextMockRecorder) Workdir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Workdir", reflect.TypeOf((*MockContext)(nil).Workdir))
}
